# Default values for cyber-ai-agent chart.

# Global image settings (can be overridden per agent)
image:
  repository: ghcr.io/your-org/cyber-ai-agent # Replace with your image registry/repo
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# List of agents to deploy. Each item creates a separate Deployment and Service.
agents:
  - name: "example-agent"
    # configFile: "example_agent.yaml" # Corresponds to a key in the configmap
    replicaCount: 1
    # Override global image settings if needed
    # image:
    #   tag: "specific-tag"
    resources:
      limits:
        cpu: "500m"
        memory: "512Mi"
      requests:
        cpu: "200m"
        memory: "256Mi"
    # Additional environment variables for this specific agent
    env: []
    # - name: SPECIFIC_AGENT_VAR
    #   value: "some_value"
    service:
      enabled: true
      type: ClusterIP
      port: 80 # Service port
      targetPort: 8000 # Container port (FastAPI default)
    # Add HPA config if needed
    # autoscaling:
    #   enabled: false
    #   minReplicas: 1
    #   maxReplicas: 5
    #   targetCPUUtilizationPercentage: 80
    #   targetMemoryUtilizationPercentage: 80

# Example of another agent
# - name: "log-monitor"
#   replicaCount: 1
#   resources:
#     limits:
#       cpu: "1"
#       memory: "1Gi"
#     requests:
#       cpu: "500m"
#       memory: "512Mi"
#   service:
#     enabled: true
#     type: ClusterIP
#     port: 80
#     targetPort: 8000

# Configuration settings mounted as ConfigMap
# The keys here should match the filenames in `config/agents` and `config/tools`
# These will be populated from the files in the `helm/files/config` directory during packaging or deployment.
configFiles:
  # example_agent.yaml: |-
  #   id: example-agent
  #   ...
  # ip_lookup_tool.yaml: |-
  #   name: ip_lookup_tool
  #   ...
  # providers.yaml: |-
  #   openai:
  #     ...
  pass # Placeholder - content loaded from files/config/*

# Environment variables applied globally to all agent pods
# Secrets should be managed via Kubernetes Secrets and referenced here
# using valueFrom.secretKeyRef
globalEnv:
  - name: PYTHONUNBUFFERED
    value: "1"
  - name: PYTHONDONTWRITEBYTECODE
    value: "1"
  # Example secret reference:
  # - name: OPENAI_API_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: cyber-agent-secrets # Name of the K8s Secret object
  #       key: openai-api-key      # Key within the Secret


# Optional: Ingress configuration
ingress:
  enabled: false
  # className: "nginx"
  # annotations: {}
  #   kubernetes.io/ingress.class: nginx
  #   kubernetes.io/tls-acme: "true"
  # hosts:
  #   - host: chart-example.local
  #     paths:
  #       - path: /
  #         pathType: ImplementationSpecific
  #         # Example: Route traffic to the example-agent service
  #         backend:
  #           service:
  #             name: example-agent # Needs dynamic name based on agent loop
  #             port:
  #               number: 80
  # tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


# Resource requests and limits (can be overridden per agent)
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  # minReplicas: 1
  # maxReplicas: 100
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {} 